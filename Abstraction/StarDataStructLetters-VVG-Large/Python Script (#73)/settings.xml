<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import re %%00010# Copy input to output%%00010output_table_1 = input_table_1.copy()%%00010%%00010def cleanText(x):%%00010%%00009x[0] = re.sub(r&quot;\d[r|v]:\d\s&quot;,&quot;&quot;,x[0])%%00010%%00009temp = x[0].split(&quot; &quot;)%%00010%%00009ans = &quot;&quot;%%00010%%00009i = 0%%00010%%00009for noteID in x[1]:%%00010%%00009%%00009while i &lt; len(temp):%%00010%%00009%%00009%%00009if temp[i] == noteID:%%00010%%00009%%00009%%00009%%00009ans+=&quot; &quot;+&quot; &quot;.join(temp[:i]) if len(ans) else &quot; &quot;.join(temp[:i])%%00010%%00009%%00009%%00009%%00009temp = temp[i+1:]%%00010%%00009%%00009%%00009%%00009i=0%%00010%%00009%%00009%%00009%%00009break %%00010%%00009%%00009%%00009else:%%00010%%00009%%00009%%00009%%00009i+=1%%00010%%00009ans+= &quot; &quot; + &quot; &quot;.join(temp) if len(ans) else &quot; &quot;.join(temp)%%00010%%00009x[0] = ans %%00010%%00009return x[0]%%00010%%00010def fillWithZeros(x,type):%%00010%%00009if x:%%00010%%00009%%00009codes = x.split(&quot;, &quot;)%%00010%%00009%%00009for i in range(len(codes)):%%00010%%00009%%00009%%00009if len(codes[i])&gt;1:%%00010%%00009%%00009%%00009%%00009number = codes[i].split(type+&quot; &quot;)[1]%%00010%%00009%%00009%%00009%%00009codes[i] = type + &quot;0&quot;*(4-len(number)) + number %%00010%%00009%%00009return &quot;, &quot;.join(codes)%%00010%%00009return x%%00010%%00009%%00010%%00010output_table_1['TRANSLATION'] = output_table_1[['TRANSLATION','NOTESJSON']].apply(cleanText,axis=1)%%00010output_table_1['ORIGINAL'] = output_table_1[['ORIGINAL','NOTESJSON']].apply(cleanText,axis=1)%%00010%%00009%%00009%%00009%%00009%%00010output_table_1['ARTWORKSJH'] = output_table_1['ARTWORKSJH'].apply(fillWithZeros,type=&quot;JH&quot;)%%00010output_table_1['ARTWORKSF']%%00009= output_table_1['ARTWORKSF'].apply(fillWithZeros,type=&quot;F&quot;)"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="python3"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="dialog_was_opened" type="xboolean" value="true"/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Clean letter from notes codes %%00013%%00010and completes F and JH codes%%00013%%00010"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="793"/>
<entry key="y-coordinate" type="xint" value="799"/>
<entry key="width" type="xint" value="176"/>
<entry key="height" type="xint" value="45"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles">
<config key="style_0">
<entry key="start" type="xint" value="0"/>
<entry key="length" type="xint" value="62"/>
<entry key="fontname" type="xstring" value="Arial"/>
<entry key="fontstyle" type="xint" value="0"/>
<entry key="fontsize" type="xint" value="9"/>
<entry key="fgcolor" type="xint" value="0"/>
</config>
</config>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
<entry key="node-name" type="xstring" value="Python Script"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.3.2.v202103021016"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.3.2.v202103021016"/>
<config key="factory_settings"/>
<config key="node_creation_config">
<config key="Input object (pickled)"/>
<config key="Input table">
<config key="port_0">
<entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
</config>
</config>
<config key="Output table">
<config key="port_0">
<entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
</config>
</config>
<config key="Output image"/>
<config key="Output object (pickled)"/>
</config>
<entry key="name" type="xstring" value="Python Script"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
